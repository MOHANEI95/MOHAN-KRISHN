{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The original list is : [{'name': 'affirm', 'confidence': 0.9448149204254}, {'name': 'affirm', 'confidence': 0.944814920425415}, {'name': 'inform', 'confidence': 0.9842240810394287}, {'name': 'inform', 'confidence': 0.9842240810394287}]\n",
      "The list after removing duplicates : [{'confidence': 0.944814920425415, 'name': 'affirm'}, {'confidence': 0.9448149204254, 'name': 'affirm'}, {'confidence': 0.9842240810394287, 'name': 'inform'}]\n"
     ]
    }
   ],
   "source": [
    " # question 6\n",
    "# Initialize list\n",
    "test_list = ict_list=[{'name': 'affirm', 'confidence': 0.9448149204254}, {'name': 'affirm', 'confidence': 0.944814920425415}, {'name': 'inform', 'confidence': 0.9842240810394287}, {'name': 'inform', 'confidence': 0.9842240810394287}] \n",
    "  \n",
    "# printing original list\n",
    "print(\"The original list is : \" + str(test_list))\n",
    "  \n",
    "# Unique dictionary filter in list\n",
    "# Using map() + set() + items() + sorted() + tuple()\n",
    "res = list(map(dict, set(tuple(sorted(sub.items())) for sub in test_list)))\n",
    "  \n",
    "# printing result\n",
    "print(\"The list after removing duplicates : \" + str(res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 7\n",
    "import re\n",
    "p= input(\"Input your password\")\n",
    "x = True\n",
    "while x:  \n",
    "    if (len(p)<6 or len(p)>12):\n",
    "        break\n",
    "    elif not re.search(\"[a-z]\",p):\n",
    "        break\n",
    "    elif not re.search(\"[0-9]\",p):\n",
    "        break\n",
    "    elif not re.search(\"[A-Z]\",p):\n",
    "        break\n",
    "    elif not re.search(\"[$#@]\",p):\n",
    "        break\n",
    "    elif re.search(\"\\s\",p):\n",
    "        break\n",
    "    else:\n",
    "        print(\"Valid Password\")\n",
    "        x=False\n",
    "        break\n",
    "\n",
    "if x:\n",
    "    print(\"Not a Valid Password\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 8\n",
    "d1 = {'a': 100, 'b': 200, 'c':300}\n",
    "d2 = {'a': 300, 'b': 200, 'd':400}\n",
    "d3 = {}\n",
    "for i, j in d1.items():\n",
    "for x, y in d2.items():\n",
    "if i == x:\n",
    "d3[i]=(j+y)\n",
    "print(d3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 5\n",
    "import spacy\n",
    "nlp = spacy.load('en')\n",
    "doc = nlp(u'I want a pizza.')\n",
    "for token in doc:\n",
    "  print(token.text, token.pos_, token.dep_)\n",
    "f= open(\"utterances.txt\",\"rb\")\n",
    "contents =f.read()\n",
    "doc = nlp(contents.decode('utf8')) \n",
    "for sent in doc.sents:\n",
    "  for token in sent: \n",
    "    #processing each token in a sentence\n",
    "  doc = nlp(u'I know it You know it.')\n",
    "print(len(list(doc.sents))) \n",
    "doc = nlp(u'I know it You know it.')\n",
    "print(len(list(doc.sents))) \n",
    "intents = []\n",
    "transVerbs = [('order','want','give','make'),('cancel', 'drop', 'revoke','annul')]\n",
    "directObjs = [('pizza','pie','pizzaz'),('cola','soda')]\n",
    "for sent in doc.sents:\n",
    "  tverb = ''\n",
    "  dobj = ''\n",
    "  intent = ''\n",
    "  for token in sent:\n",
    "    if token.dep_ == 'dobj':\n",
    "      tverb = token.head.text \n",
    "      dobj = token.text\n",
    "  verbSyns = [tpl for tpl in transVerbs if tverb in tpl]\n",
    "  dobjSyns = [tpl for tpl in directObjs if dobj in tpl]\n",
    "  if verbSyns != [] and dobjSyns != []: \n",
    "    intent = verbSyns[0][0].capitalize() + dobjSyns[0][0].capitalize()\n",
    "  if intent != '':\n",
    "    intents.append(tuple((sent.text.rstrip(), intent)))\n",
    "    neg = False\n",
    "for token in sent: \n",
    "  if token.dep_ == 'neg' and token.head.dep_ == 'ROOT':\n",
    "     #it's a negative utterance.\n",
    "     neg = True\n",
    "if neg and 'Order' in intent: \n",
    "  intent = intent.replace('Order','Cancel')\n",
    "if intent == '':\n",
    "  doc = nlp(u'eating')\n",
    "  for token in sent: \n",
    "    if token.similarity(doc[0]) > 0.2: \n",
    "      if not neg:\n",
    "        intent = 'OrderPizza'\n",
    "      else:\n",
    "        intent = 'CancelPizza'\n",
    "        if intent == '':\n",
    "  doc = nlp(u'eating')\n",
    "  for token in sent: \n",
    "    if token.similarity(doc[0]) > 0.2: \n",
    "      if not neg:\n",
    "        intent = 'OrderPizza'\n",
    "      else:\n",
    "        intent = 'CancelPizza'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
